name: OBMS CI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches:
      - '**'

  pull_request:
    branches:
      - '**'

jobs:
  Lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Create .env
      #   run: |
      #     touch .env
      #     echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
      #     echo POSTGRES_NAME=${{ vars.POSTGRES_NAME }} >> .env
      #     echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
      #     echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
      #     echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env
      #     echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env
      #     echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env
      #     echo DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' >> .env
      #     echo PG_DATA=/var/lib/postgresql/data/pgdata >> .env

      # - name: Compose OBMS
      #   run: docker compose up --build --detach --wait --wait-timeout 60

      - name: Setup Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Create and source venv
        run: |
          pip install --upgrade pip
          python3.10 -m venv env
          source env/bin/activate

      - name: Install Requirements
        run: pip install -r ./app/requirements.txt

      - name: Lint Python
        id: py-lint
        run: |
          prefix="Your code has been rated at "
          string=$(pylint ./app/obms/ | grep "$prefix")
          rating=${string#"$prefix"}
          final=$(echo "$rating" | cut -f1 -d "/")
          score=$(bc -l <<< 10-${final})
          echo "python_rating=${score}" >> $GITHUB_OUTPUT

      - name: Check Python Linting
        if: ${{ steps.py-lint.outputs.python_rating != '0' }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Linting found errors! Run a pylint on app/obms to see them.')

      - name: Lint HTML and Jinja Templates
        id: dj-lint
        run: echo "html_rating=$(djlint ./app/obms/librarian/templates --extension=html --lint | grep 'found 0 errors')" >> $GITHUB_OUTPUT

      - name: Check HTML Linting
        if: ${{ !steps.dj-lint.outputs.html_rating }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Linting found errors! Run djlint on the templates directory to see them.')

      # - name: Stop and Down Compose Gracefully
      #   run: |
      #     docker compose stop
      #     docker compose down




